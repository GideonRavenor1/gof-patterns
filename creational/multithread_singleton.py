"""
Модификация Singleton под многопоточность.
Предотвращает создание новых экземпляров класса в многопоточных приложениях

Одиночка (Singleton, Синглтон) - порождающий паттерн, который гарантирует,
что для определенного класса будет создан только один объект,
а также предоставит к этому объекту точку доступа.
Синглтон позволяет создать объект только при его необходимости.
Если объект не нужен, то он не будет создан.
В этом отличие синглтона от глобальных переменных.

Когда надо использовать Синглтон?
    1. Когда необходимо, чтобы для класса существовал только один экземпляр

Недостатки: Бездумное использование данного паттерна может привести к
плохому дизайну архитектуры.
Считается антипаттерном.
"""


from threading import Lock


class SingletonBaseClass(type):
    _instances = {}
    _lock: Lock = Lock()

    def __call__(cls, *args, **kwargs):
        with cls._lock:
            if cls not in cls._instances:
                instance = super().__call__(*args, **kwargs)
                cls._instances[cls] = instance
        return cls._instances[cls]
